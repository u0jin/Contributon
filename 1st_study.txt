1) git/github 실습
https://github.com/taeung/git-training


git 실습 준비하기


add) 커밋할 목록에 추가
commit ) 히스토리의 한단위 : 커밋만들기  -> 나의ssd에 들어가 ㅋㅋ 내꺼에만 있어
push) 지금까지 의 커밋 밀어넣기 깃!   -> 미국의 깃의  데이터 센터에 들어감 : 공유하려고 하는거야

기본: add, commit , push, PR


cd ~ : 이동했어

mkdir  ** : 폴더 만들기

pwd: 현재 경로 확인

add -> 커미할 상태로 만들어준거야 -> 추적이 가능해진거
git staut-> 추척할수 있어 

commit -m:  메세지를 적는거야

branch : 같은 폴더인데 다른세상이야
-> 경로 옮길경우에는 에러가 생길수가있어 = 현재상태유지하면서 변경하고싶어 -> 상태유지하면서 변경도 하고싶어


amend후 force한 이유 

amend : 가장 최상위의 커밋에 흡수시키는것,
-=---- 가장 최근꺼 말고 3번커밋에 하고싶어 ---> 

싱크가 안맞으면 충돌이생겨-> 그래서 강제로 올리는거야

만약에 다 똑같고 그냥 새로운거 올리는거야 -> 그럼그냥 push로 자연스럽게 올라가


force가 깔끔---> 팀장이 그냥 포스로 올려버리면 커밋이 문제 생겼을때 정정가능


포크는 웹상의 일임- 내 로컬에는 관계없어

fetch해서 임시로 가져온후 rebase 로 베이스 바꿔 그럼 
내가 나중에 만든 커밋을 올리는데 문제없어


==>rebase 했을때 에러 뜬다면 -> force 한거야  ::: 그래서 force 로 갱신하는거 별로 안좋아해


commit삭제:  rebert  작업해

rewind으로 되감기 해줘

여러 커밋을 수정해야해--->
 수정하고 싶은 포인터에 두고 continue로 풀어헤침
-> successfully 하면 끝








-----


2) uftrace 실습

printf를 매번 치는거-> 툴을 사용해서 흐름 파악하는것.



#include <stdio.h>
int a(int arg)
{ prinntf("%d\n",arg);
}
int main(){
a(10)}


=====

aut0-args



ls uftrace.data-> 트레이스 된 데이터 봄



reply -> 얼마나 돌아갔는지 확인가능


=====

graph -> 그래프로 보면 어떻게 된건지 함축되어서 보기쉽다.

sudo apt install -> 설치

record -> reply




















